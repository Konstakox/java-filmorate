-- vol.5
-- PUBLIC.FILMS definition

drop table IF EXISTS MPA, FILMS, USERS, GENRES, FILM_GENRE, MOVIE_LIKES, FRIENDS CASCADE;

-- DROP TABLE FILMS;

create TABLE IF NOT EXISTS MPA
(
    MPA_ID   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    MPA_NAME CHARACTER VARYING(5)
);

create TABLE IF NOT EXISTS FILMS
(
    FILM_ID      INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FILM_NAME    CHARACTER VARYING(255) NOT NULL,
    DESCRIPTION  CHARACTER VARYING(255) NOT NULL,
    RELEASE_DATE DATE,
    DURATION     INTEGER,
    MPA_ID       INTEGER REFERENCES MPA (mpa_id)
);


-- PUBLIC.USERS definition

-- Drop table

-- DROP TABLE USERS;

create TABLE IF NOT EXISTS USERS
(
    USER_ID   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    USER_NAME CHARACTER VARYING(150),
    LOGIN     CHARACTER VARYING(150) NOT NULL,
    EMAIL     CHARACTER VARYING(100) NOT NULL,
    BIRTHDAY  DATE
);


-- PUBLIC.GENRES definition

-- Drop table

-- DROP TABLE GENRES;

create TABLE IF NOT EXISTS GENRES
(
    GENRE_ID   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    GENRE_NAME CHARACTER VARYING(14) NOT NULL
);

-- PUBLIC.FILM_GENRE definition

-- Drop table

-- DROP TABLE FILM_GENRE;

create TABLE IF NOT EXISTS FILM_GENRE
(
    FILM_ID  INTEGER REFERENCES FILMS (FILM_ID) ON delete CASCADE ON update CASCADE,
    GENRE_ID INTEGER REFERENCES GENRES (GENRE_ID) ON delete CASCADE ON update CASCADE,
    PRIMARY KEY (FILM_ID, GENRE_ID)
);



-- PUBLIC.MOVIE_LIKES definition

-- Drop table

-- DROP TABLE MOVIE_LIKES;

create TABLE IF NOT EXISTS MOVIE_LIKES
(
    FILM_ID INTEGER REFERENCES FILMS (FILM_ID) ON delete CASCADE ON update CASCADE,
    USER_ID INTEGER REFERENCES USERS (USER_ID) ON delete CASCADE ON update CASCADE,
    PRIMARY KEY (FILM_ID, USER_ID)
);


-- PUBLIC.FRIENDS definition

-- Drop table

-- DROP TABLE FRIENDS;

create TABLE IF NOT EXISTS FRIENDS
(
    USER_ID   INTEGER NOT NULL REFERENCES USERS (USER_ID) ON delete CASCADE ON update CASCADE,
    FRIEND_ID INTEGER NOT NULL REFERENCES USERS (USER_ID) ON delete CASCADE ON update CASCADE,
    CONFIRMED BOOLEAN,
    PRIMARY KEY (USER_ID, FRIEND_ID)
);
